# Auto-generated file -- DO NOT EDIT!!!!!

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

=head1 NAME

Lucy::Index::Indexer - Build inverted indexes.

=head1 SYNOPSIS

    my $indexer = Lucy::Index::Indexer->new(
        schema => $schema,
        index  => '/path/to/index',
        create => 1,
    );
    while ( my ( $title, $content ) = each %source_docs ) {
        $indexer->add_doc({
            title   => $title,
            content => $content,
        });
    }
    $indexer->commit;



=head1 DESCRIPTION

The Indexer class is Apache Lucy's primary tool for managing the content of
inverted indexes, which may later be searched using
L<IndexSearcher|Lucy::Search::IndexSearcher>.

In general, only one Indexer at a time may write to an index safely.  If a
write lock cannot be secured, new() will throw an exception.

If an index is located on a shared volume, each writer application must
identify itself by supplying an
L<IndexManager|Lucy::Index::IndexManager> with a unique
C<< host >> id to Indexer's constructor or index corruption will
occur.  See L<Lucy::Docs::FileLocking> for a detailed discussion.

Note: at present, delete_by_term() and delete_by_query() only affect
documents which had been previously committed to the index -- and not any
documents added this indexing session but not yet committed.  This may
change in a future update.

=head1 CONSTRUCTORS

=head2 new( I<[labeled params]> )

Open a new Indexer.  If the index already exists, update it.

=over

=item *

B<schema> - A Schema.

=item *

B<index> - Either a string filepath or a Folder.

=item *

B<manager> - An IndexManager.

=item *

B<flags> - Flags governing behavior.

=back





=head1 METHODS

=head2 add_doc(...)

    $indexer->add_doc($doc);
    $indexer->add_doc( { field_name => $field_value } );
    $indexer->add_doc(
        doc   => { field_name => $field_value },
        boost => 2.5,         # default: 1.0
    );

Add a document to the index.  Accepts either a single argument or labeled
params.

=over

=item *

B<doc> - Either a Lucy::Document::Doc object, or a hashref (which will
be attached to a Lucy::Document::Doc object internally).

=item *

B<boost> - A floating point weight which affects how this document scores.

=back

=head2 add_index(index)

Absorb an existing index into this one.  The two indexes must
have matching Schemas.

=over

=item *

B<index> - Either an index path name or a Folder.

=back

=head2 optimize()

Optimize the index for search-time performance.  This may take a
while, as it can involve rewriting large amounts of data.

=head2 commit()

Commit any changes made to the index.  Until this is called, none of
the changes made during an indexing session are permanent.

Calling commit() invalidates the Indexer, so if you want to make more
changes you'll need a new one.

=head2 prepare_commit()

Perform the expensive setup for commit() in advance, so that commit()
completes quickly.  (If prepare_commit() is not called explicitly by
the user, commit() will call it internally.)

=head2 delete_by_term( I<[labeled params]> )

Mark documents which contain the supplied term as deleted, so that
they will be excluded from search results and eventually removed
altogether.  The change is not apparent to search apps until after
commit() succeeds.

=over

=item *

B<field> - The name of an indexed field. (If it is not spec'd as
C<< indexed >>, an error will occur.)

=item *

B<term> - The term which identifies docs to be marked as deleted.  If
C<< field >> is associated with an Analyzer, C<< term >>
will be processed automatically (so don't pre-process it yourself).

=back

=head2 delete_by_query(query)

Mark documents which match the supplied Query as deleted.

=over

=item *

B<query> - A L<Query|Lucy::Search::Query>.

=back



=head1 INHERITANCE

Lucy::Index::Indexer isa L<Lucy::Object::Obj>.


=cut

