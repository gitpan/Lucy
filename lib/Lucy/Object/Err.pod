# Auto-generated file -- DO NOT EDIT!!!!!

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

=head1 NAME

Lucy::Object::Err - Exception.

=head1 SYNOPSIS

    use Scalar::Util qw( blessed );
    my $bg_merger;
    while (1) {
        $bg_merger = eval {
            Lucy::Index::BackgroundMerger->new( index => $index );
        };
        last if $bg_merger;
        if ( blessed($@) and $@->isa("Lucy::Store::LockErr") ) {
            warn "Retrying...\n";
        }
        else {
            # Re-throw.
            die "Failed to open BackgroundMerger: $@";
        }
    }



=head1 DESCRIPTION

Most of the time when Lucy encounters an error, it tries to raise a
Lucy::Object::Err exception with an error message and context
information.

At present, it is only safe to catch exceptions which are specifically
documented as catchable; most times when an Err is raised, Lucy leaks
memory.

The Err module also provides access to a per-thread Err shared variable via
set_error() and get_error().  It may be used to store an Err object
temporarily, so that calling code may choose how to handle a particular
error condition.







=head1 INHERITANCE

Lucy::Object::Err isa L<Lucy::Object::Obj>.


=cut

